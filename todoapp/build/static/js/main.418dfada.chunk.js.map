{"version":3,"sources":["components/NewTask.js","components/Tasks.js","components/ListOfTasks.js","components/App.js","serviceWorker.js","index.js"],"names":["NewTask","minDate","Date","toISOString","slice","state","text","checked","date","_this","handleText","e","setState","target","value","handleCheckbox","handleDate","handleClick","_this$state","length","props","add","alert","maxDate","this","react_default","a","createElement","className","type","placeholder","onChange","id","htmlFor","min","max","onClick","Component","Tasks","_props$task","task","active","important","finishDate","style","color","change","delete","finish","toLocaleString","ListOfTasks","tasks","filter","done","sort","b","toLowerCase","activeTasks","map","components_Tasks","key","doneTasks","Fragment","fontSize","App","deleteTask","Object","toConsumableArray","changeTaskStatus","Array","from","forEach","getTime","addTask","counter","prevState","concat","components_NewTask","components_ListOfTasks","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gOAgEeA,6MA3DfC,SAAU,IAAIC,MAAOC,cAAcC,MAAM,EAAG,MAC5CC,MAAQ,CACJC,KAAM,GACNC,SAAS,EACTC,KAAMC,EAAKR,WAEbS,WAAa,SAACC,GACZF,EAAKG,SAAS,CACZN,KAAMK,EAAEE,OAAOC,WAInBC,eAAiB,SAACJ,GAChBF,EAAKG,SAAS,CACZL,QAASI,EAAEE,OAAON,aAItBS,WAAa,SAACL,GACZF,EAAKG,SAAS,CACZJ,KAAMG,EAAEE,OAAOC,WAInBG,YAAc,WAAM,IAAAC,EAEcT,EAAKJ,MAA7BC,EAFUY,EAEVZ,KAAMC,EAFIW,EAEJX,QAASC,EAFLU,EAEKV,KACnBF,EAAKa,OAAS,EACJV,EAAKW,MAAMC,IAAIf,EAAME,EAAMD,IAErCE,EAAKG,SAAS,CACZN,KAAM,GACNC,SAAS,EACTC,KAAMC,EAAKR,UAIfqB,MAAM,oHAKJ,IAAIC,EAAqC,EAA3BC,KAAKvB,QAAQG,MAAM,EAAG,GAAS,EAG7C,OAFAmB,GAAoB,SAGhBE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACfH,EAAAC,EAAAC,cAAA,SAAOE,KAAK,OAAOC,YAAY,gBAAgBhB,MAAOU,KAAKnB,MAAMC,KAAMyB,SAAUP,KAAKd,aACtFe,EAAAC,EAAAC,cAAA,SAAOE,KAAK,WAAWtB,QAASiB,KAAKnB,MAAME,QAASyB,GAAG,YAAYD,SAAUP,KAAKT,iBAClFU,EAAAC,EAAAC,cAAA,SAAOM,QAAQ,aAAf,wBAAuDR,EAAAC,EAAAC,cAAA,WAAMF,EAAAC,EAAAC,cAAA,WAC7DF,EAAAC,EAAAC,cAAA,SAAOM,QAAQ,QAAf,yBACAR,EAAAC,EAAAC,cAAA,SAAOE,KAAK,OAAOf,MAAOU,KAAKnB,MAAMG,KAAM0B,IAAKV,KAAKvB,QAASkC,IAAKZ,EAASQ,SAAUP,KAAKR,aAC3FS,EAAAC,EAAAC,cAAA,WAAMF,EAAAC,EAAAC,cAAA,WACNF,EAAAC,EAAAC,cAAA,UAASS,QAASZ,KAAKP,aAAvB,iBAvDUoB,aC8BPC,EA/BD,SAAClB,GACX,IADqBmB,EAIuCnB,EAAMoB,KAAxDlC,EAJWiC,EAIXjC,KAAME,EAJK+B,EAIL/B,KAAMwB,EAJDO,EAICP,GAAIS,EAJLF,EAIKE,OAAQC,EAJbH,EAIaG,UAAWC,EAJxBJ,EAIwBI,WAE/C,GAAIF,EACF,OACEhB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAAA,UAAQiB,MAAOF,EATP,CACVG,MAAO,OAQ8B,MAAOvC,GAD5C,SACgEmB,EAAAC,EAAAC,cAAA,YAAOnB,EAAP,KAC9DiB,EAAAC,EAAAC,cAAA,UAAQS,QAAS,kBAAMhB,EAAM0B,OAAOd,KAApC,yBACAP,EAAAC,EAAAC,cAAA,UAAQS,QAAS,kBAAMhB,EAAM2B,OAAOf,KAApC,OAMN,IAAMgB,EAAS,IAAI9C,KAAKyC,GAAYM,iBACpC,OACIxB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAAA,cAASrB,GAAcmB,EAAAC,EAAAC,cAAA,8BAAiBnB,EAAjB,KAA4BiB,EAAAC,EAAAC,cAAA,WADrD,4BAE2BF,EAAAC,EAAAC,cAAA,gBAAQqB,GAEjCvB,EAAAC,EAAAC,cAAA,UAAQS,QAAS,kBAAMhB,EAAM2B,OAAOf,KAApC,QC2BKkB,EAnDK,SAAC9B,GACjB,IAAMqB,EAASrB,EAAM+B,MAAMC,OAAO,SAAAZ,GAAI,OAAIA,EAAKC,SAC3CY,EAAOjC,EAAM+B,MAAMC,OAAO,SAAAZ,GAAI,OAAKA,EAAKC,SAG1CY,EAAKlC,QAAU,GACjBkC,EAAKC,KAAK,SAAC5B,EAAG6B,GACZ,OAAI7B,EAAEiB,WAAaY,EAAEZ,WACZ,EAELjB,EAAEiB,WAAaY,EAAEZ,YACX,EAEH,IAGPF,EAAOtB,QAAU,GACnBsB,EAAOa,KAAK,SAAC5B,EAAG6B,GAKd,OAHA7B,EAAIA,EAAEpB,KAAKkD,gBACXD,EAAIA,EAAEjD,KAAKkD,gBAEQ,EACf9B,EAAI6B,EAAU,EACX,IAIT,IAAME,EAAchB,EAAOiB,IAAI,SAAAlB,GAAI,OAAIf,EAAAC,EAAAC,cAACgC,EAAD,CAAOC,IAAKpB,EAAKR,GAAIQ,KAAMA,EAAMO,OAAQ3B,EAAM2B,OAAQD,OAAQ1B,EAAM0B,WACtGe,EAAYR,EAAKK,IAAI,SAAAlB,GAAI,OAAIf,EAAAC,EAAAC,cAACgC,EAAD,CAAOC,IAAKpB,EAAKR,GAAIQ,KAAMA,EAAMO,OAAQ3B,EAAM2B,OAAQD,OAAQ1B,EAAM0B,WAExG,OACIrB,EAAAC,EAAAC,cAAAF,EAAAC,EAAAoC,SAAA,KACFrC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,iCACC8B,EAAYtC,OAAS,EAAIsC,EAAchC,EAAAC,EAAAC,cAAA,0CAG1CF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,OAEdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,+BAAiBF,EAAAC,EAAAC,cAAA,cAAM0B,EAAKlC,OAAX,MAChBkC,EAAKlC,OAAS,GAAKM,EAAAC,EAAAC,cAAA,QAAMiB,MAAO,CAAEmB,SAAU,KAAzB,0DACnBF,EAAUzD,MAAM,EAAG,MC2Bb4D,oNAlEb3D,MAAQ,CACN8C,MAAO,CACL,CACEnB,GAAI,EACJ1B,KAAM,oCACNE,KAAM,aACNkC,WAAW,EACXD,QAAQ,EACRE,WAAY,UAKlBsB,WAAa,SAACjC,GAEZ,IAAImB,EAAKe,OAAAC,EAAA,EAAAD,CAAOzD,EAAKJ,MAAM8C,OAC3BA,EAAQA,EAAMC,OAAO,SAAAZ,GAAI,OAAIA,EAAKR,KAAOA,IACzCvB,EAAKG,SAAS,CACZuC,aAIJiB,iBAAmB,SAACpC,GAClB,IAAMmB,EAAQkB,MAAMC,KAAK7D,EAAKJ,MAAM8C,OACpCA,EAAMoB,QAAQ,SAAA/B,GACRA,EAAKR,KAAOA,IACdQ,EAAKC,QAAS,EACdD,EAAKG,YAAa,IAAIzC,MAAOsE,aAGjC/D,EAAKG,SAAS,CACZuC,aAIJsB,QAAU,SAACnE,EAAME,EAAMkC,GACrB,IAAMF,EAAO,CACXR,GAAIvB,EAAKiE,QACTpE,OACAE,OACAkC,YACAD,QAAQ,EACRE,WAAY,MASd,OAPAlC,EAAKiE,UAELjE,EAAKG,SAAS,SAAA+D,GAAS,MAAK,CAC1BxB,MAAK,GAAAyB,OAAAV,OAAAC,EAAA,EAAAD,CAAMS,EAAUxB,OAAhB,CAAuBX,QAIvB,2EAIP,OACEf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAACkD,EAAD,CAASxD,IAAKG,KAAKiD,UACnBhD,EAAAC,EAAAC,cAACmD,EAAD,CAAa3B,MAAO3B,KAAKnB,MAAM8C,MAAOJ,OAAQvB,KAAKyC,WAAYnB,OAAQtB,KAAK4C,2BA7DlE/B,cCOE0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5D,EAAAC,EAAAC,cAAC2D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.418dfada.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\n\r\nclass NewTask extends Component{\r\n\r\nminDate = new Date().toISOString().slice(0, 10);\r\nstate = {\r\n    text: '',\r\n    checked: false,\r\n    date: this.minDate\r\n  }\r\n  handleText = (e) => {\r\n    this.setState({\r\n      text: e.target.value\r\n    })\r\n  }\r\n\r\n  handleCheckbox = (e) => {\r\n    this.setState({\r\n      checked: e.target.checked\r\n    })\r\n  }\r\n\r\n  handleDate = (e) => {\r\n    this.setState({\r\n      date: e.target.value\r\n    })\r\n  }\r\n\r\n  handleClick = () => {\r\n\r\n    const { text, checked, date } = this.state;\r\n    if (text.length > 2) {\r\n      const add = this.props.add(text, date, checked);\r\n      if (add) {\r\n        this.setState({\r\n          text: '',\r\n          checked: false,\r\n          date: this.minDate\r\n        })\r\n      }\r\n    } else {\r\n      alert(\"wprowadź dłuższe zadanie\");\r\n    }\r\n  }\r\n    render(){\r\n\r\n        let maxDate = this.minDate.slice(0, 4) * 1 + 1;\r\n        maxDate = maxDate + \"-12-31\";\r\n        \r\n        return(\r\n            <div className=\"form\">\r\n            <input type=\"text\" placeholder=\"dodaj zadanie\" value={this.state.text} onChange={this.handleText} />\r\n            <input type=\"checkbox\" checked={this.state.checked} id=\"important\" onChange={this.handleCheckbox} />\r\n            <label htmlFor=\"important\">Zadanie priorytetowe</label><br /><br/>\r\n            <label htmlFor=\"date\">Do kiedy wykonać</label>\r\n            <input type=\"date\" value={this.state.date} min={this.minDate} max={maxDate} onChange={this.handleDate} />\r\n            <br /><br />\r\n            <button  onClick={this.handleClick}>Dodaj</button>\r\n          </div>  \r\n        )\r\n    }\r\n}\r\n\r\nexport default NewTask;","import React from 'react';\r\n\r\nconst Tasks = (props) => {\r\n    const style = {\r\n        color: 'red',\r\n      }\r\n      const { text, date, id, active, important, finishDate } = props.task;\r\n\r\n  if (active) {\r\n    return (\r\n      <div>\r\n        <p>\r\n          <strong style={important ? style : null}>{text}</strong> - do <span>{date} </span>\r\n          <button onClick={() => props.change(id)}>Zostało zrobione</button>\r\n          <button onClick={() => props.delete(id)}>X</button>\r\n        </p>\r\n\r\n      </div>\r\n    );\r\n  } else {\r\n    const finish = new Date(finishDate).toLocaleString()\r\n    return(\r\n        <div>\r\n        <p>\r\n          <strong>{text}</strong><em> (zrobić do {date})</em><br />\r\n          - potwierdzenie wykonania<span> {finish}</span>\r\n\r\n          <button onClick={() => props.delete(id)}>X</button>\r\n        </p>\r\n      </div>  \r\n    )\r\n}\r\n}\r\nexport default Tasks;","import React from 'react';\r\nimport Tasks from './Tasks'\r\n\r\nconst ListOfTasks = (props) => {\r\n    const active = props.tasks.filter(task => task.active);\r\n  const done = props.tasks.filter(task => !task.active);\r\n\r\n\r\n  if (done.length >= 2) {\r\n    done.sort((a, b) => {\r\n      if (a.finishDate < b.finishDate) {\r\n        return 1\r\n      }\r\n      if (a.finishDate > b.finishDate) {\r\n        return -1\r\n      }\r\n      return 0\r\n    })\r\n  }\r\n  if (active.length >= 2) {\r\n    active.sort((a, b) => {\r\n\r\n      a = a.text.toLowerCase();\r\n      b = b.text.toLowerCase();\r\n\r\n      if (a < b) return -1;\r\n      if (a > b) return 1;\r\n      return 0\r\n    })\r\n  }\r\n\r\n    const activeTasks = active.map(task => <Tasks key={task.id} task={task} delete={props.delete} change={props.change} />)\r\n    const doneTasks = done.map(task => <Tasks key={task.id} task={task} delete={props.delete} change={props.change} />)\r\n    \r\n    return(\r\n        <>\r\n      <div className=\"active\">\r\n        <h1>Co mam zrobić?</h1>\r\n        {activeTasks.length > 0 ? activeTasks : <p>Brak zadań do wykonania</p>}\r\n      </div>\r\n\r\n      <hr className=\"Hr\" />\r\n \r\n      <div className=\"done\">\r\n        <h3>Już zrobione <em>({done.length})</em></h3>\r\n        {done.length > 5 && <span style={{ fontSize: 10 }}>Wyświetlonych jest jedynie 5 ostatnich zadań</span>}\r\n        {doneTasks.slice(0, 5)}\r\n\r\n      </div>\r\n    </>\r\n    )\r\n}\r\n\r\n\r\nexport default ListOfTasks;","import React, {Component} from 'react';\nimport NewTask from './NewTask';\nimport ListOfTasks from './ListOfTasks';\nimport './App.css';\n\nclass App extends Component {\n\n  state = {\n    tasks: [\n      {\n        id: 0,\n        text: 'skończyć apkę ToDo',\n        date: '2019-08-01',\n        important: true,\n        active: true,\n        finishDate: null\n      },\n    ]\n  }\n\n  deleteTask = (id) => {\n\n    let tasks = [...this.state.tasks];\n    tasks = tasks.filter(task => task.id !== id)\n    this.setState({\n      tasks\n    })\n  }\n\n  changeTaskStatus = (id) => {\n    const tasks = Array.from(this.state.tasks);\n    tasks.forEach(task => {\n      if (task.id === id) {\n        task.active = false;\n        task.finishDate = new Date().getTime()\n      }\n    })\n    this.setState({\n      tasks\n    })\n  }\n\n  addTask = (text, date, important) => {\n    const task = {\n      id: this.counter,\n      text, \n      date,\n      important, \n      active: true,\n      finishDate: null\n    }\n    this.counter++\n\n    this.setState(prevState => ({\n      tasks: [...prevState.tasks, task]\n    }))\n\n\n    return true\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>ToDo App</h1>\n        <NewTask add={this.addTask}/>\n        <ListOfTasks tasks={this.state.tasks} delete={this.deleteTask} change={this.changeTaskStatus} />\n      \n      </div>\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}